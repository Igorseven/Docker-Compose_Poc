// <auto-generated />
using CustomerBase.API.Business.Insfrastructure.ORM.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerBase.API.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerBase.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<byte>("AddressType")
                        .HasColumnType("tinyint")
                        .HasColumnName("address_type");

                    b.Property<string>("City")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("complement");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("country");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("District")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("district");

                    b.Property<string>("Localization")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("localization");

                    b.Property<string>("Number")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("number");

                    b.Property<string>("State")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("zip_code");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address", "CustomerBase");
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_customer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("full_name");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer", "CustomerBase");
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.EmailAddress", b =>
                {
                    b.Property<int>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_emailAddress");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAddressId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<byte>("EmailType")
                        .HasColumnType("tinyint")
                        .HasColumnName("email_type");

                    b.HasKey("EmailAddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("EmailAddress", "CustomerBase");
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.Telephone", b =>
                {
                    b.Property<int>("TelephoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_telephone");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TelephoneId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Ddd")
                        .IsUnicode(true)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("ddd");

                    b.Property<string>("Ddi")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("ddi");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone_number");

                    b.Property<byte>("TelephoneType")
                        .HasColumnType("tinyint")
                        .HasColumnName("telephone_type");

                    b.HasKey("TelephoneId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Telephone", "CustomerBase");
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.Address", b =>
                {
                    b.HasOne("CustomerBase.Domain.Entities.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.EmailAddress", b =>
                {
                    b.HasOne("CustomerBase.Domain.Entities.Customer", null)
                        .WithMany("Emails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.Telephone", b =>
                {
                    b.HasOne("CustomerBase.Domain.Entities.Customer", null)
                        .WithMany("Telephones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CustomerBase.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("Telephones");
                });
#pragma warning restore 612, 618
        }
    }
}
